/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { D1Database, IncomingRequestCfProperties } from '@cloudflare/workers-types/experimental';
import type { AstroConfig, AstroIntegrationLogger } from 'astro';
import type { Json } from 'miniflare';
import type { Options } from '../index.js';
type BASE_RUNTIME = {
    mode: 'local';
    type: 'pages' | 'workers';
    persistTo: string;
    bindings: Record<string, {
        type: 'var';
        value: string | Json;
    } | {
        type: 'kv';
    } | {
        type: 'r2';
    } | {
        type: 'd1';
    } | {
        type: 'durable-object';
        className: string;
        service?: {
            name: string;
            env?: string;
        };
    }>;
};
export type RUNTIME = {
    mode: BASE_RUNTIME['mode'];
    type: 'pages';
    persistTo: BASE_RUNTIME['persistTo'];
    bindings: BASE_RUNTIME['bindings'];
} | {
    mode: BASE_RUNTIME['mode'];
    type: 'workers';
    persistTo: BASE_RUNTIME['persistTo'];
};
declare class LocalRuntime {
    private _astroConfig;
    private _logger;
    private _miniflare;
    private miniflareBindings;
    private secrets;
    private cfObject;
    constructor(astroConfig: AstroConfig, runtimeConfig: BASE_RUNTIME, logger: AstroIntegrationLogger);
    getBindings(): Promise<Record<string, D1Database | Json | {
        head: (key: string) => Promise<{
            readonly key: string;
            readonly version: string;
            readonly size: number;
            readonly etag: string;
            readonly httpEtag: string;
            readonly checksums: {
                readonly md5?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha1?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha256?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha384?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha512?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                toJSON: () => {
                    md5?: string | undefined;
                    sha1?: string | undefined;
                    sha256?: string | undefined;
                    sha384?: string | undefined;
                    sha512?: string | undefined;
                };
            };
            readonly uploaded: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => {};
                [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
            };
            readonly httpMetadata?: {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            readonly customMetadata?: {
                [x: string]: string;
            } | undefined;
            readonly range?: {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
            writeHttpMetadata: (headers: import("miniflare").Headers) => void;
        } | null>;
        get: ((key: string, options: {
            onlyIf: import("miniflare").Headers | {
                etagMatches?: string | undefined;
                etagDoesNotMatch?: string | undefined;
                uploadedBefore?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                uploadedAfter?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                secondsGranularity?: boolean | undefined;
            };
            range?: import("miniflare").Headers | {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
        }) => Promise<{
            readonly key: string;
            readonly version: string;
            readonly size: number;
            readonly etag: string;
            readonly httpEtag: string;
            readonly checksums: {
                readonly md5?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha1?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha256?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha384?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha512?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                toJSON: () => {
                    md5?: string | undefined;
                    sha1?: string | undefined;
                    sha256?: string | undefined;
                    sha384?: string | undefined;
                    sha512?: string | undefined;
                };
            };
            readonly uploaded: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => {};
                [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
            };
            readonly httpMetadata?: {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            readonly customMetadata?: {
                [x: string]: string;
            } | undefined;
            readonly range?: {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
            writeHttpMetadata: (headers: import("miniflare").Headers) => void;
        } | {
            readonly body: import("stream/web").ReadableStream<any>;
            readonly bodyUsed: boolean;
            arrayBuffer: () => Promise<{
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            }>;
            text: () => Promise<string>;
            json: () => Promise<unknown>;
            blob: () => Promise<import("buffer").Blob>;
            readonly key: string;
            readonly version: string;
            readonly size: number;
            readonly etag: string;
            readonly httpEtag: string;
            readonly checksums: {
                readonly md5?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha1?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha256?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha384?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha512?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                toJSON: () => {
                    md5?: string | undefined;
                    sha1?: string | undefined;
                    sha256?: string | undefined;
                    sha384?: string | undefined;
                    sha512?: string | undefined;
                };
            };
            readonly uploaded: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => {};
                [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
            };
            readonly httpMetadata?: {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            readonly customMetadata?: {
                [x: string]: string;
            } | undefined;
            readonly range?: {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
            writeHttpMetadata: (headers: import("miniflare").Headers) => void;
        } | null>) & ((key: string, options?: {
            onlyIf?: import("miniflare").Headers | {
                etagMatches?: string | undefined;
                etagDoesNotMatch?: string | undefined;
                uploadedBefore?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                uploadedAfter?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                secondsGranularity?: boolean | undefined;
            } | undefined;
            range?: import("miniflare").Headers | {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
        } | undefined) => Promise<{
            readonly body: import("stream/web").ReadableStream<any>;
            readonly bodyUsed: boolean;
            arrayBuffer: () => Promise<{
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            }>;
            text: () => Promise<string>;
            json: () => Promise<unknown>;
            blob: () => Promise<import("buffer").Blob>;
            readonly key: string;
            readonly version: string;
            readonly size: number;
            readonly etag: string;
            readonly httpEtag: string;
            readonly checksums: {
                readonly md5?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha1?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha256?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha384?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha512?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                toJSON: () => {
                    md5?: string | undefined;
                    sha1?: string | undefined;
                    sha256?: string | undefined;
                    sha384?: string | undefined;
                    sha512?: string | undefined;
                };
            };
            readonly uploaded: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => {};
                [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
            };
            readonly httpMetadata?: {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            readonly customMetadata?: {
                [x: string]: string;
            } | undefined;
            readonly range?: {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
            writeHttpMetadata: (headers: import("miniflare").Headers) => void;
        } | null>);
        put: ((key: string, value: string | {
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => any;
            readonly [Symbol.toStringTag]: string;
        } | import("stream/web").ReadableStream<any> | import("buffer").Blob | {
            buffer: {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.species]: any;
                readonly [Symbol.toStringTag]: "SharedArrayBuffer";
            };
            byteLength: number;
            byteOffset: number;
        } | null, options?: {
            onlyIf: import("miniflare").Headers | {
                etagMatches?: string | undefined;
                etagDoesNotMatch?: string | undefined;
                uploadedBefore?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                uploadedAfter?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                secondsGranularity?: boolean | undefined;
            };
            httpMetadata?: import("miniflare").Headers | {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            customMetadata?: {
                [x: string]: string;
            } | undefined;
            md5?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha1?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha256?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha384?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha512?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
        } | undefined) => Promise<{
            readonly key: string;
            readonly version: string;
            readonly size: number;
            readonly etag: string;
            readonly httpEtag: string;
            readonly checksums: {
                readonly md5?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha1?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha256?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha384?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha512?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                toJSON: () => {
                    md5?: string | undefined;
                    sha1?: string | undefined;
                    sha256?: string | undefined;
                    sha384?: string | undefined;
                    sha512?: string | undefined;
                };
            };
            readonly uploaded: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => {};
                [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
            };
            readonly httpMetadata?: {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            readonly customMetadata?: {
                [x: string]: string;
            } | undefined;
            readonly range?: {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
            writeHttpMetadata: (headers: import("miniflare").Headers) => void;
        } | null>) & ((key: string, value: string | {
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => any;
            readonly [Symbol.toStringTag]: string;
        } | import("stream/web").ReadableStream<any> | import("buffer").Blob | {
            buffer: {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.species]: any;
                readonly [Symbol.toStringTag]: "SharedArrayBuffer";
            };
            byteLength: number;
            byteOffset: number;
        } | null, options?: {
            onlyIf?: import("miniflare").Headers | {
                etagMatches?: string | undefined;
                etagDoesNotMatch?: string | undefined;
                uploadedBefore?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                uploadedAfter?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                secondsGranularity?: boolean | undefined;
            } | undefined;
            httpMetadata?: import("miniflare").Headers | {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            customMetadata?: {
                [x: string]: string;
            } | undefined;
            md5?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha1?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha256?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha384?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
            sha512?: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | undefined;
        } | undefined) => Promise<{
            readonly key: string;
            readonly version: string;
            readonly size: number;
            readonly etag: string;
            readonly httpEtag: string;
            readonly checksums: {
                readonly md5?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha1?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha256?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha384?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                readonly sha512?: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | undefined;
                toJSON: () => {
                    md5?: string | undefined;
                    sha1?: string | undefined;
                    sha256?: string | undefined;
                    sha384?: string | undefined;
                    sha512?: string | undefined;
                };
            };
            readonly uploaded: {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string) & ((locales?: string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                } | readonly (string | {
                    baseName: string;
                    language: string;
                    maximize: () => any;
                    minimize: () => any;
                    toString: () => string;
                    calendar?: string | undefined;
                    caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                    collation?: string | undefined;
                    hourCycle?: Intl.LocaleHourCycleKey | undefined;
                    numberingSystem?: string | undefined;
                    numeric?: boolean | undefined;
                    region?: string | undefined;
                    script?: string | undefined;
                })[] | undefined, options?: {
                    localeMatcher?: "best fit" | "lookup" | undefined;
                    weekday?: "long" | "short" | "narrow" | undefined;
                    era?: "long" | "short" | "narrow" | undefined;
                    year?: "numeric" | "2-digit" | undefined;
                    month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                    day?: "numeric" | "2-digit" | undefined;
                    hour?: "numeric" | "2-digit" | undefined;
                    minute?: "numeric" | "2-digit" | undefined;
                    second?: "numeric" | "2-digit" | undefined;
                    timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                    formatMatcher?: "basic" | "best fit" | undefined;
                    hour12?: boolean | undefined;
                    timeZone?: string | undefined;
                    calendar?: string | undefined;
                    dayPeriod?: "long" | "short" | "narrow" | undefined;
                    numberingSystem?: string | undefined;
                    dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                    timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                    hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                    fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                } | undefined) => string);
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                getVarDate: () => {};
                [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
            };
            readonly httpMetadata?: {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            readonly customMetadata?: {
                [x: string]: string;
            } | undefined;
            readonly range?: {
                offset: number;
                length?: number | undefined;
            } | {
                offset?: number | undefined;
                length: number;
            } | {
                suffix: number;
            } | undefined;
            writeHttpMetadata: (headers: import("miniflare").Headers) => void;
        }>);
        createMultipartUpload: (key: string, options?: {
            httpMetadata?: import("miniflare").Headers | {
                contentType?: string | undefined;
                contentLanguage?: string | undefined;
                contentDisposition?: string | undefined;
                contentEncoding?: string | undefined;
                cacheControl?: string | undefined;
                cacheExpiry?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
            } | undefined;
            customMetadata?: {
                [x: string]: string;
            } | undefined;
        } | undefined) => Promise<{
            readonly key: string;
            readonly uploadId: string;
            uploadPart: (partNumber: number, value: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | import("stream/web").ReadableStream<any> | import("buffer").Blob | {
                buffer: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.species]: any;
                    readonly [Symbol.toStringTag]: "SharedArrayBuffer";
                };
                byteLength: number;
                byteOffset: number;
            }) => Promise<{
                partNumber: number;
                etag: string;
            }>;
            abort: () => Promise<void>;
            complete: (uploadedParts: {
                partNumber: number;
                etag: string;
            }[]) => Promise<{
                readonly key: string;
                readonly version: string;
                readonly size: number;
                readonly etag: string;
                readonly httpEtag: string;
                readonly checksums: {
                    readonly md5?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha1?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha256?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha384?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha512?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    toJSON: () => {
                        md5?: string | undefined;
                        sha1?: string | undefined;
                        sha256?: string | undefined;
                        sha384?: string | undefined;
                        sha512?: string | undefined;
                    };
                };
                readonly uploaded: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                readonly httpMetadata?: {
                    contentType?: string | undefined;
                    contentLanguage?: string | undefined;
                    contentDisposition?: string | undefined;
                    contentEncoding?: string | undefined;
                    cacheControl?: string | undefined;
                    cacheExpiry?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => {};
                        [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                    } | undefined;
                } | undefined;
                readonly customMetadata?: {
                    [x: string]: string;
                } | undefined;
                readonly range?: {
                    offset: number;
                    length?: number | undefined;
                } | {
                    offset?: number | undefined;
                    length: number;
                } | {
                    suffix: number;
                } | undefined;
                writeHttpMetadata: (headers: import("miniflare").Headers) => void;
            }>;
        }>;
        resumeMultipartUpload: (key: string, uploadId: string) => {
            readonly key: string;
            readonly uploadId: string;
            uploadPart: (partNumber: number, value: string | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | import("stream/web").ReadableStream<any> | import("buffer").Blob | {
                buffer: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.species]: any;
                    readonly [Symbol.toStringTag]: "SharedArrayBuffer";
                };
                byteLength: number;
                byteOffset: number;
            }) => Promise<{
                partNumber: number;
                etag: string;
            }>;
            abort: () => Promise<void>;
            complete: (uploadedParts: {
                partNumber: number;
                etag: string;
            }[]) => Promise<{
                readonly key: string;
                readonly version: string;
                readonly size: number;
                readonly etag: string;
                readonly httpEtag: string;
                readonly checksums: {
                    readonly md5?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha1?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha256?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha384?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha512?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    toJSON: () => {
                        md5?: string | undefined;
                        sha1?: string | undefined;
                        sha256?: string | undefined;
                        sha384?: string | undefined;
                        sha512?: string | undefined;
                    };
                };
                readonly uploaded: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                readonly httpMetadata?: {
                    contentType?: string | undefined;
                    contentLanguage?: string | undefined;
                    contentDisposition?: string | undefined;
                    contentEncoding?: string | undefined;
                    cacheControl?: string | undefined;
                    cacheExpiry?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => {};
                        [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                    } | undefined;
                } | undefined;
                readonly customMetadata?: {
                    [x: string]: string;
                } | undefined;
                readonly range?: {
                    offset: number;
                    length?: number | undefined;
                } | {
                    offset?: number | undefined;
                    length: number;
                } | {
                    suffix: number;
                } | undefined;
                writeHttpMetadata: (headers: import("miniflare").Headers) => void;
            }>;
        };
        delete: (keys: string | string[]) => Promise<void>;
        list: (options?: {
            limit?: number | undefined;
            prefix?: string | undefined;
            cursor?: string | undefined;
            delimiter?: string | undefined;
            startAfter?: string | undefined;
            include?: ("httpMetadata" | "customMetadata")[] | undefined;
        } | undefined) => Promise<{
            objects: {
                readonly key: string;
                readonly version: string;
                readonly size: number;
                readonly etag: string;
                readonly httpEtag: string;
                readonly checksums: {
                    readonly md5?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha1?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha256?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha384?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha512?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    toJSON: () => {
                        md5?: string | undefined;
                        sha1?: string | undefined;
                        sha256?: string | undefined;
                        sha384?: string | undefined;
                        sha512?: string | undefined;
                    };
                };
                readonly uploaded: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                readonly httpMetadata?: {
                    contentType?: string | undefined;
                    contentLanguage?: string | undefined;
                    contentDisposition?: string | undefined;
                    contentEncoding?: string | undefined;
                    cacheControl?: string | undefined;
                    cacheExpiry?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => {};
                        [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                    } | undefined;
                } | undefined;
                readonly customMetadata?: {
                    [x: string]: string;
                } | undefined;
                readonly range?: {
                    offset: number;
                    length?: number | undefined;
                } | {
                    offset?: number | undefined;
                    length: number;
                } | {
                    suffix: number;
                } | undefined;
                writeHttpMetadata: (headers: import("miniflare").Headers) => void;
            }[];
            delimitedPrefixes: string[];
            truncated: true;
            cursor: string;
        } | {
            objects: {
                readonly key: string;
                readonly version: string;
                readonly size: number;
                readonly etag: string;
                readonly httpEtag: string;
                readonly checksums: {
                    readonly md5?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha1?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha256?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha384?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    readonly sha512?: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | undefined;
                    toJSON: () => {
                        md5?: string | undefined;
                        sha1?: string | undefined;
                        sha256?: string | undefined;
                        sha384?: string | undefined;
                        sha512?: string | undefined;
                    };
                };
                readonly uploaded: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                readonly httpMetadata?: {
                    contentType?: string | undefined;
                    contentLanguage?: string | undefined;
                    contentDisposition?: string | undefined;
                    contentEncoding?: string | undefined;
                    cacheControl?: string | undefined;
                    cacheExpiry?: {
                        toString: () => string;
                        toDateString: () => string;
                        toTimeString: () => string;
                        toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string) & ((locales?: string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        } | readonly (string | {
                            baseName: string;
                            language: string;
                            maximize: () => any;
                            minimize: () => any;
                            toString: () => string;
                            calendar?: string | undefined;
                            caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                            collation?: string | undefined;
                            hourCycle?: Intl.LocaleHourCycleKey | undefined;
                            numberingSystem?: string | undefined;
                            numeric?: boolean | undefined;
                            region?: string | undefined;
                            script?: string | undefined;
                        })[] | undefined, options?: {
                            localeMatcher?: "best fit" | "lookup" | undefined;
                            weekday?: "long" | "short" | "narrow" | undefined;
                            era?: "long" | "short" | "narrow" | undefined;
                            year?: "numeric" | "2-digit" | undefined;
                            month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                            day?: "numeric" | "2-digit" | undefined;
                            hour?: "numeric" | "2-digit" | undefined;
                            minute?: "numeric" | "2-digit" | undefined;
                            second?: "numeric" | "2-digit" | undefined;
                            timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                            formatMatcher?: "basic" | "best fit" | undefined;
                            hour12?: boolean | undefined;
                            timeZone?: string | undefined;
                            calendar?: string | undefined;
                            dayPeriod?: "long" | "short" | "narrow" | undefined;
                            numberingSystem?: string | undefined;
                            dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                            timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                            hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                            fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                        } | undefined) => string);
                        valueOf: () => number;
                        getTime: () => number;
                        getFullYear: () => number;
                        getUTCFullYear: () => number;
                        getMonth: () => number;
                        getUTCMonth: () => number;
                        getDate: () => number;
                        getUTCDate: () => number;
                        getDay: () => number;
                        getUTCDay: () => number;
                        getHours: () => number;
                        getUTCHours: () => number;
                        getMinutes: () => number;
                        getUTCMinutes: () => number;
                        getSeconds: () => number;
                        getUTCSeconds: () => number;
                        getMilliseconds: () => number;
                        getUTCMilliseconds: () => number;
                        getTimezoneOffset: () => number;
                        setTime: (time: number) => number;
                        setMilliseconds: (ms: number) => number;
                        setUTCMilliseconds: (ms: number) => number;
                        setSeconds: (sec: number, ms?: number | undefined) => number;
                        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                        setDate: (date: number) => number;
                        setUTCDate: (date: number) => number;
                        setMonth: (month: number, date?: number | undefined) => number;
                        setUTCMonth: (month: number, date?: number | undefined) => number;
                        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                        toUTCString: () => string;
                        toISOString: () => string;
                        toJSON: (key?: any) => string;
                        getVarDate: () => {};
                        [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                    } | undefined;
                } | undefined;
                readonly customMetadata?: {
                    [x: string]: string;
                } | undefined;
                readonly range?: {
                    offset: number;
                    length?: number | undefined;
                } | {
                    offset?: number | undefined;
                    length: number;
                } | {
                    suffix: number;
                } | undefined;
                writeHttpMetadata: (headers: import("miniflare").Headers) => void;
            }[];
            delimitedPrefixes: string[];
            truncated: false;
        }>;
    } | {
        get: ((key: string, options?: {
            type?: undefined;
            cacheTtl?: number | undefined;
        } | undefined) => Promise<string | null>) & ((key: string, type: "text") => Promise<string | null>) & ((key: string, type: "json") => Promise<unknown>) & ((key: string, type: "arrayBuffer") => Promise<{
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => any;
            readonly [Symbol.toStringTag]: string;
        } | null>) & ((key: string, type: "stream") => Promise<import("stream/web").ReadableStream<any> | null>) & ((key: string, options?: {
            type: "text";
            cacheTtl?: number | undefined;
        } | undefined) => Promise<string | null>) & ((key: string, options?: {
            type: "json";
            cacheTtl?: number | undefined;
        } | undefined) => Promise<unknown>) & ((key: string, options?: {
            type: "arrayBuffer";
            cacheTtl?: number | undefined;
        } | undefined) => Promise<{
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => any;
            readonly [Symbol.toStringTag]: string;
        } | null>) & ((key: string, options?: {
            type: "stream";
            cacheTtl?: number | undefined;
        } | undefined) => Promise<import("stream/web").ReadableStream<any> | null>);
        list: (options?: {
            limit?: number | undefined;
            prefix?: string | null | undefined;
            cursor?: string | null | undefined;
        } | undefined) => Promise<{
            list_complete: false;
            keys: {
                name: string;
                expiration?: number | undefined;
                metadata?: unknown;
            }[];
            cursor: string;
            cacheStatus: string | null;
        } | {
            list_complete: true;
            keys: {
                name: string;
                expiration?: number | undefined;
                metadata?: unknown;
            }[];
            cacheStatus: string | null;
        }>;
        put: (key: string, value: string | {
            readonly byteLength: number;
            slice: (begin: number, end?: number | undefined) => any;
            readonly [Symbol.toStringTag]: string;
        } | import("stream/web").ReadableStream<any> | {
            buffer: {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.species]: any;
                readonly [Symbol.toStringTag]: "SharedArrayBuffer";
            };
            byteLength: number;
            byteOffset: number;
        }, options?: {
            expiration?: number | undefined;
            expirationTtl?: number | undefined;
            metadata?: any;
        } | undefined) => Promise<void>;
        getWithMetadata: ((key: string, options?: {
            type?: undefined;
            cacheTtl?: number | undefined;
        } | undefined) => Promise<{
            value: string | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, type: "text") => Promise<{
            value: string | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, type: "json") => Promise<{
            value: unknown;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, type: "arrayBuffer") => Promise<{
            value: {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, type: "stream") => Promise<{
            value: import("stream/web").ReadableStream<any> | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, options: {
            type: "text";
            cacheTtl?: number | undefined;
        }) => Promise<{
            value: string | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, options: {
            type: "json";
            cacheTtl?: number | undefined;
        }) => Promise<{
            value: unknown;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, options: {
            type: "arrayBuffer";
            cacheTtl?: number | undefined;
        }) => Promise<{
            value: {
                readonly byteLength: number;
                slice: (begin: number, end?: number | undefined) => any;
                readonly [Symbol.toStringTag]: string;
            } | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>) & ((key: string, options: {
            type: "stream";
            cacheTtl?: number | undefined;
        }) => Promise<{
            value: import("stream/web").ReadableStream<any> | null;
            metadata: unknown;
            cacheStatus: string | null;
        }>);
        delete: (key: string) => Promise<void>;
    } | {
        newUniqueId: (options?: {
            jurisdiction?: import("@cloudflare/workers-types/experimental/index.js").DurableObjectJurisdiction | undefined;
        } | undefined) => {
            toString: () => string;
            equals: (other: any) => boolean;
            readonly name?: string | undefined;
        };
        idFromName: (name: string) => {
            toString: () => string;
            equals: (other: any) => boolean;
            readonly name?: string | undefined;
        };
        idFromString: (id: string) => {
            toString: () => string;
            equals: (other: any) => boolean;
            readonly name?: string | undefined;
        };
        get: (id: {
            toString: () => string;
            equals: (other: any) => boolean;
            readonly name?: string | undefined;
        }, options?: {
            locationHint?: import("@cloudflare/workers-types/experimental/index.js").DurableObjectLocationHint | undefined;
        } | undefined) => {
            readonly id: {
                toString: () => string;
                equals: (other: any) => boolean;
                readonly name?: string | undefined;
            };
            readonly name?: string | undefined;
            fetch: (input: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, init?: import("miniflare").RequestInit<import("miniflare").RequestInitCfType> | undefined) => Promise<import("miniflare").Response>;
            connect: (address: string | {
                hostname: string;
                port: number;
            }, options?: {
                secureTransport?: string | undefined;
                allowHalfOpen: boolean;
            } | undefined) => {
                readonly readable: import("stream/web").ReadableStream<any>;
                readonly writable: {
                    readonly locked: boolean;
                    abort: (reason?: any) => Promise<void>;
                    close: () => Promise<void>;
                    getWriter: () => {
                        readonly closed: Promise<void>;
                        readonly ready: Promise<void>;
                        readonly desiredSize: number | null;
                        abort: (reason?: any) => Promise<void>;
                        close: () => Promise<void>;
                        write: (chunk?: any) => Promise<void>;
                        releaseLock: () => void;
                    };
                };
                readonly closed: Promise<void>;
                close: () => Promise<void>;
                startTls: (options?: {
                    expectedServerHostname?: string | undefined;
                } | undefined) => any;
            };
            queue: (queueName: string, messages: ({
                id: string;
                timestamp: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                serializedBody: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | {
                    buffer: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.species]: any;
                        readonly [Symbol.toStringTag]: "SharedArrayBuffer";
                    };
                    byteLength: number;
                    byteOffset: number;
                };
            } | {
                id: string;
                timestamp: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                body: unknown;
            })[]) => Promise<{
                outcome: string;
                retryAll: boolean;
                ackAll: boolean;
                explicitRetries: string[];
                explicitAcks: string[];
            }>;
            scheduled: (options?: {
                scheduledTime?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                cron?: string | undefined;
            } | undefined) => Promise<{
                outcome: string;
                noRetry: boolean;
            }>;
        };
        getExisting: (id: {
            toString: () => string;
            equals: (other: any) => boolean;
            readonly name?: string | undefined;
        }, options?: {
            locationHint?: import("@cloudflare/workers-types/experimental/index.js").DurableObjectLocationHint | undefined;
        } | undefined) => {
            readonly id: {
                toString: () => string;
                equals: (other: any) => boolean;
                readonly name?: string | undefined;
            };
            readonly name?: string | undefined;
            fetch: (input: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, init?: import("miniflare").RequestInit<import("miniflare").RequestInitCfType> | undefined) => Promise<import("miniflare").Response>;
            connect: (address: string | {
                hostname: string;
                port: number;
            }, options?: {
                secureTransport?: string | undefined;
                allowHalfOpen: boolean;
            } | undefined) => {
                readonly readable: import("stream/web").ReadableStream<any>;
                readonly writable: {
                    readonly locked: boolean;
                    abort: (reason?: any) => Promise<void>;
                    close: () => Promise<void>;
                    getWriter: () => {
                        readonly closed: Promise<void>;
                        readonly ready: Promise<void>;
                        readonly desiredSize: number | null;
                        abort: (reason?: any) => Promise<void>;
                        close: () => Promise<void>;
                        write: (chunk?: any) => Promise<void>;
                        releaseLock: () => void;
                    };
                };
                readonly closed: Promise<void>;
                close: () => Promise<void>;
                startTls: (options?: {
                    expectedServerHostname?: string | undefined;
                } | undefined) => any;
            };
            queue: (queueName: string, messages: ({
                id: string;
                timestamp: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                serializedBody: {
                    readonly byteLength: number;
                    slice: (begin: number, end?: number | undefined) => any;
                    readonly [Symbol.toStringTag]: string;
                } | {
                    buffer: {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.toStringTag]: string;
                    } | {
                        readonly byteLength: number;
                        slice: (begin: number, end?: number | undefined) => any;
                        readonly [Symbol.species]: any;
                        readonly [Symbol.toStringTag]: "SharedArrayBuffer";
                    };
                    byteLength: number;
                    byteOffset: number;
                };
            } | {
                id: string;
                timestamp: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                };
                body: unknown;
            })[]) => Promise<{
                outcome: string;
                retryAll: boolean;
                ackAll: boolean;
                explicitRetries: string[];
                explicitAcks: string[];
            }>;
            scheduled: (options?: {
                scheduledTime?: {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleDateString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    toLocaleTimeString: (() => string) & ((locales?: string | string[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string) & ((locales?: string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    } | readonly (string | {
                        baseName: string;
                        language: string;
                        maximize: () => any;
                        minimize: () => any;
                        toString: () => string;
                        calendar?: string | undefined;
                        caseFirst?: Intl.LocaleCollationCaseFirst | undefined;
                        collation?: string | undefined;
                        hourCycle?: Intl.LocaleHourCycleKey | undefined;
                        numberingSystem?: string | undefined;
                        numeric?: boolean | undefined;
                        region?: string | undefined;
                        script?: string | undefined;
                    })[] | undefined, options?: {
                        localeMatcher?: "best fit" | "lookup" | undefined;
                        weekday?: "long" | "short" | "narrow" | undefined;
                        era?: "long" | "short" | "narrow" | undefined;
                        year?: "numeric" | "2-digit" | undefined;
                        month?: "numeric" | "long" | "short" | "narrow" | "2-digit" | undefined;
                        day?: "numeric" | "2-digit" | undefined;
                        hour?: "numeric" | "2-digit" | undefined;
                        minute?: "numeric" | "2-digit" | undefined;
                        second?: "numeric" | "2-digit" | undefined;
                        timeZoneName?: "long" | "short" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;
                        formatMatcher?: "basic" | "best fit" | undefined;
                        hour12?: boolean | undefined;
                        timeZone?: string | undefined;
                        calendar?: string | undefined;
                        dayPeriod?: "long" | "short" | "narrow" | undefined;
                        numberingSystem?: string | undefined;
                        dateStyle?: "long" | "short" | "full" | "medium" | undefined;
                        timeStyle?: "long" | "short" | "full" | "medium" | undefined;
                        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;
                        fractionalSecondDigits?: 2 | 1 | 3 | undefined;
                    } | undefined) => string);
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    getVarDate: () => {};
                    [Symbol.toPrimitive]: ((hint: "default") => string) & ((hint: "string") => string) & ((hint: "number") => number) & ((hint: string) => string | number);
                } | undefined;
                cron?: string | undefined;
            } | undefined) => Promise<{
                outcome: string;
                noRetry: boolean;
            }>;
        };
        jurisdiction: (jurisdiction: import("@cloudflare/workers-types/experimental/index.js").DurableObjectJurisdiction) => any;
    }> | undefined>;
    getSecrets(): Promise<Record<string, string>>;
    getCaches(): Promise<{
        open: (cacheName: string) => Promise<{
            delete: (request: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, options?: {
                ignoreMethod?: boolean | undefined;
            } | undefined) => Promise<boolean>;
            match: (request: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, options?: {
                ignoreMethod?: boolean | undefined;
            } | undefined) => Promise<import("miniflare").Response | undefined>;
            put: (request: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, response: import("miniflare").Response) => Promise<void>;
        }>;
        readonly default: {
            delete: (request: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, options?: {
                ignoreMethod?: boolean | undefined;
            } | undefined) => Promise<boolean>;
            match: (request: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, options?: {
                ignoreMethod?: boolean | undefined;
            } | undefined) => Promise<import("miniflare").Response | undefined>;
            put: (request: string | import("miniflare").Request<import("miniflare").RequestInitCfType> | {
                readonly origin: string;
                href: string;
                protocol: string;
                username: string;
                password: string;
                host: string;
                hostname: string;
                port: string;
                pathname: string;
                search: string;
                hash: string;
                readonly searchParams: {
                    readonly size: number;
                    append: (name: string, value: string) => void;
                    delete: (name: string, value?: string | undefined) => void;
                    get: (name: string) => string | null;
                    getAll: (name: string) => string[];
                    has: (name: string, value?: string | undefined) => boolean;
                    set: (name: string, value: string) => void;
                    sort: () => void;
                    entries: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                    keys: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    values: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: string;
                        }) | undefined;
                    };
                    forEach: (callback: (value: string, key: string, parent: any) => void, thisArg?: unknown) => void;
                    toString: () => string;
                    [Symbol.iterator]: () => {
                        [Symbol.iterator]: any;
                        next: (...args: [] | [undefined]) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        };
                        return?: ((value?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                        throw?: ((e?: any) => {
                            done: true;
                            value: any;
                        } | {
                            done?: false | undefined;
                            value: [key: string, value: string];
                        }) | undefined;
                    };
                };
                toJSON: () => string;
                toString: () => string;
            }, response: import("miniflare").Response) => Promise<void>;
        };
    }>;
    getCF(): Promise<IncomingRequestCfProperties | undefined>;
    dispose(): Promise<void>;
}
export declare class LocalWorkersRuntime extends LocalRuntime {
    constructor(astroConfig: AstroConfig, runtimeConfig: Extract<RUNTIME, {
        type: 'workers';
    }>, logger: AstroIntegrationLogger);
}
export declare class LocalPagesRuntime extends LocalRuntime {
    constructor(astroConfig: AstroConfig, runtimeConfig: Extract<RUNTIME, {
        type: 'pages';
    }>, logger: AstroIntegrationLogger);
}
export declare function getLocalRuntime(astroConfig: AstroConfig, runtimeConfig: RUNTIME, logger: AstroIntegrationLogger): LocalPagesRuntime | LocalWorkersRuntime;
export declare function getRuntimeConfig(userConfig?: Options['runtime']): {
    mode: 'off';
} | RUNTIME;
export {};
