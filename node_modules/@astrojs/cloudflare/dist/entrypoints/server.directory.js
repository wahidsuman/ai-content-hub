import { App } from 'astro/app';
import { getProcessEnvProxy, isNode } from '../util.js';
if (!isNode) {
    process.env = getProcessEnvProxy();
}
export function createExports(manifest) {
    const app = new App(manifest);
    const onRequest = async (context) => {
        const request = context.request;
        const { env } = context;
        // TODO: remove this any cast in the future
        // REF: the type cast to any is needed because the Cloudflare Env Type is not assignable to type 'ProcessEnv'
        process.env = env;
        const { pathname } = new URL(request.url);
        // static assets fallback, in case default _routes.json is not used
        if (manifest.assets.has(pathname)) {
            return env.ASSETS.fetch(request);
        }
        const routeData = app.match(request);
        Reflect.set(request, Symbol.for('astro.clientAddress'), request.headers.get('cf-connecting-ip'));
        const locals = {
            runtime: {
                waitUntil: (promise) => {
                    context.waitUntil(promise);
                },
                env: context.env,
                cf: request.cf,
                caches: caches,
            },
        };
        const response = await app.render(request, routeData, locals);
        if (app.setCookieHeaders) {
            for (const setCookieHeader of app.setCookieHeaders(response)) {
                response.headers.append('Set-Cookie', setCookieHeader);
            }
        }
        return response;
    };
    return { onRequest, manifest };
}
