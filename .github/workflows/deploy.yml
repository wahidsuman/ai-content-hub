name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Wrangler
        run: npm install --no-fund --no-audit --save-dev wrangler@4

      - name: Print versions
        run: |
          node -v
          npx wrangler --version

      - name: Ensure NEWS_KV points to state
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          node -e "const {execSync}=require('child_process'); const fs=require('fs'); try { const out=execSync('npx wrangler kv:namespace list --json', {stdio:['ignore','pipe','inherit']}).toString(); const list=JSON.parse(out); const pick=(arr)=> arr.find(n=>n.title==='state')||arr.find(n=>/\bstate\b/i.test(n.title||'')); const ns=pick(list)||null; if(ns){ let t=fs.readFileSync('worker/wrangler.toml','utf8'); if(/binding\s*=\s*\"NEWS_KV\"/.test(t)){ t=t.replace(/\[\[kv_namespaces\]\][\s\S]*?binding\s*=\s*\"NEWS_KV\"[\s\S]*?id\s*=\s*\"[^\"]*\"/m, m=> m.replace(/id\s*=\s*\"[^\"]*\"/, 'id = \"'+ns.id+'\"')); fs.writeFileSync('worker/wrangler.toml', t); console.log('NEWS_KV id set to state:', ns.id);} else { console.log('NEWS_KV binding not found in toml'); } } else { console.log('state KV not found; skipping'); } } catch(e){ console.error('KV list failed:', e.message); }"

      - name: Discover OLD_KV id (__agaminews-workers_sites_assets)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          node -e "const {execSync}=require('child_process'); const fs=require('fs'); try { const out=execSync('npx wrangler kv:namespace list --json', {stdio:['ignore','pipe','inherit']}).toString(); const list=JSON.parse(out); const pick=(arr)=> arr.find(n=>n.title==='__agaminews-workers_sites_assets')||arr.find(n=>n.title && n.title.includes('workers_sites_assets') && n.title.includes('agami')); const ns=pick(list)||null; if(ns){ fs.appendFileSync(process.env.GITHUB_ENV, `OLD_KV_ID=${ns.id}\n`); console.log('Found OLD_KV_ID:', ns.id);} else { console.log('OLD_KV_ID not found; will skip migration bind'); } } catch(e){ console.error('List KV failed:', e.message); process.exit(0);}"

      - name: Bind OLD_KV in wrangler.toml (if found)
        run: |
          if [ -z "${{ env.OLD_KV_ID }}" ]; then echo "No OLD_KV_ID; skipping"; exit 0; fi
          node -e "const fs=require('fs'); let t=fs.readFileSync('worker/wrangler.toml','utf8'); const id=process.env.OLD_KV_ID; if(!id){process.exit(0)}; if(/binding\s*=\s*\"OLD_KV\"/.test(t)){ t=t.replace(/\[\[kv_namespaces\]\][\s\S]*?binding\s*=\s*\"OLD_KV\"[\s\S]*?id\s*=\s*\"[^\"]*\"/m, m=> m.replace(/id\s*=\s*\"[^\"]*\"/, 'id = \"'+id+'\"')); } else { t += `\n\n[[kv_namespaces]]\nbinding = \"OLD_KV\"\nid = \"${id}\"\n`; } fs.writeFileSync('worker/wrangler.toml', t); console.log('OLD_KV bound in wrangler.toml');"

      - name: Detect R2 bucket and bind (or strip if none)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          node -e "const {execSync}=require('child_process'); const fs=require('fs'); try { const out=execSync('npx wrangler r2 bucket list --json', {stdio:['ignore','pipe','inherit']}).toString(); const list=JSON.parse(out); let chosen = null; if (Array.isArray(list) && list.length>0) { chosen = (list.find(b=>b.name==='agaminews-media')||list[0]).name; } let t=fs.readFileSync('worker/wrangler.toml','utf8'); if (chosen) { if (/\[\[r2_buckets\]\]/.test(t)) { t=t.replace(/bucket_name\s*=\s*\"[^\"]*\"/, 'bucket_name = \"'+chosen+'\"'); t=t.replace(/preview_bucket_name\s*=\s*\"[^\"]*\"/, 'preview_bucket_name = \"'+chosen+'\"'); } else { t += `\n\n[[r2_buckets]]\n` + `binding = \"MEDIA_R2\"\n` + `bucket_name = \"${chosen}\"\n` + `preview_bucket_name = \"${chosen}\"\n`; } fs.writeFileSync('worker/wrangler.toml', t); console.log('Bound MEDIA_R2 to bucket:', chosen); } else { if (/\[\[r2_buckets\]\]/.test(t)) { t=t.replace(/\n\[\[r2_buckets\]\][\s\S]*?preview_bucket_name[\s\S]*?\n/m, '\n'); fs.writeFileSync('worker/wrangler.toml', t); console.log('No R2 buckets found; removed r2_buckets binding'); } else { console.log('No R2 buckets and no binding present; nothing to do'); } } } catch(e){ console.error('R2 detect/bind failed:', e.message); }"

      - name: Deploy to Cloudflare Workers (with diagnostics)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Checking credentials..."
          curl -X GET "https://api.cloudflare.com/client/v4/user/tokens/verify" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | jq '.success' || echo "Token verification failed"
          
          echo "Deploying agaminews via worker/wrangler.toml..."
          npx wrangler deploy --config worker/wrangler.toml --force

      - name: Deploy Telegram worker (root wrangler.toml)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Deploying telegram-mcq-bot-wahid via root wrangler.toml..."
          npx wrangler deploy --config wrangler.toml --force
          
          echo "Testing deployment..."
          sleep 5
          curl -s https://agaminews.in/health || echo "Health check endpoint not found"

      - name: Run KV migration (copy)
        run: |
          sleep 5
          curl -sS "https://agaminews.in/api/migrate-kv?mode=copy&key=agami2024" | sed -n '1,120p'